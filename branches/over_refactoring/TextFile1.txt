Description of the format for exported dungeon files:

16 bytes: "header" followed by zeroes
	14 byte header data times 320 rooms = 0x1180 bytes
	
16 bytes: "entrances" followed by zeroes
	2 byte entries times 85 = 0xAA bytes of data, padded at the end by zeroes
	
Description of how I'm going to organize expanded data in BM modified roms:

The program needs some way of distinguishing between a BM "initiated" rom and a rom 
of any other sort. There are some concerns though:

-A hacker may have already expanded their rom / modified several portions of it. The latter
is something I can live with, but the former means that the location of a BM "header", 
of sorts, could be variable. I'm going to think about putting an int* at address 0xFFFFC
of the rom since it's unlikely to be used, and prompt the user on this. Four bytes shouldn't be a
big deal. From that point, the rom can be expanded by 4 more megabits

so...:

!masterDataPointer = (runtime dependant)

org $1FFFFC

	dd !masterDataPointer

; reserve... say, $200 bytes for this header then start putting data after it.
; headers: just move data, not ptr table
; objects: plenty of space in the existing obj tables. just move data
; entrances: keeping it at $85 entrances, no relocation necessary
; chests: change pointers in bank $01, relocate data, alter the number of max chests.
; I forget where that is but it's currently $01F8
; sprites: ptr table can stay but a hook is required to change the B register so we can
; load from a different bank. This is not too terribly difficult or dangerous.
; See TextFile2.txt for a rundown of how this will be done
; secrets: I forgot this my first time of exporting data... don't know how I overlooked it
; regardless, it is about as easy as moving headers if not easier.
; Still needs to be done though

org !masterDataPointer:

	; the following should use CPU addresses
	; Note that an entrance ptr table, and an obj ptr table not needed!
	dd !chestPtrTable

In order to use this in the first place though... the rom must have a 
black magic extended data header installed somewhere in the rom. (next goal, design the implementation of header installation)

11/01/06 With most of the above issues out of the way, I'm going to turn now to the problem of
how to actually code all this into a cohesive editor. I'm thinking of having a variable which
indicates what editing mode the game is in. This variable is then used in a routine
that branches off the mainproc( ) procedure under the default: option. This procedure will
inherit all the arguments of the mainproc( ) procedure and then will branch into different
modes of editing. Somewhat how Zelda 3 branches into different modes, overworld, text, dungeon,
etc.

11/29/06 I'm having a huge debate with myself over the proper way to implement the display of
dungeon graphics. I have a standard mainclass window... but should I affix inside of it another
window that will serve as the drawing board for the dungeon room / overworld area, etc?
The main issues, as I see it, as these:

	-I'll have to write another window procedure to handle it
	-But if I do use an embedded window, coordinate calculations are probably much easier
	-How about this... I have a fixed paintable region that is a little over 512 by 512 pixels
	-Conversion from tiles to bitmap is done in layers. This must obey SNES typical priority.
	-more tomorrow.


